Stack [LIFO(Last In First Out) / 후입선출(後入先出) ]
-삽입과 삭제를 리스트의 한쪽(top이라고 부름)에서 행함

프링글스 통안에 1부터 100의 숫자가 새겨진 동그란 카드를 하나하나 씩 넣는다고 가정해보자. 처음에 1이 적인 카드가 프링글스 통 바닥에 쌓인다. 그리고 순서대로 쌓다보면 100이라는 숫자가 적힌 동그란 카드가 프링글스 통 안 꼭대기에 쌓인다. 이제, 여기서 카드를 하나하나씩 빼면, 처음 들어간 1이 먼저 빠지는 것이 아니라, 최근에 넣은 100부터 빠지게 된다. 이것이 바로 Stack의 개념이다.

top() — 스택의 맨 위에 있는 데이터 값(가장 최신에 업데이트 한 값)을 반환한다.
pop() — 데이터를 스택에서 빼내는 것
push() — 데이터를 스택에 쌓는 것
isempty() — 스택에 원소가 없으면 true, 있으면 false;
isfull() — 스택에 원소가 없으면 false, 있느면 true;

출처 : [ http://dblab.duksung.ac.kr/ds/pdf/Chap04.pdf ]
Queue [FIFO(First In First Out) / 선입선출(先入先出)]
-삽입은 리스트의 한쪽 (rear)에서 하고, 삭제는 삽입의 반대 쪽 (front)에서 행함.

stack의 반대개념이다. 즉, 프링글스 바닥에도 똑같이 구멍을 뚫어주어, 처음 들어간 1이 뺄 때도 먼저 빠지게 하는것이다.

메소드는 stack과 동일하게 써준다.

top() — 스택의 맨 위에 있는 데이터 값(가장 최신에 업데이트 한 값)을 반환한다.
pop() — 데이터를 스택에서 빼내는 것
push() — 데이터를 스택에 쌓는 것
isempty() — 스택에 원소가 없으면 true, 있으면 false;
isfull() — 스택에 원소가 없으면 false, 있느면 true;